동시성 문제

여러 쓰레드가 같은 인스턴스에 접근하여 상태 값을 변경할 경우
동시성 문제가 발생한다.
스프링 빈처럼 싱글톤 객체의 필드를 변경하며 사용할 때 이러한 동시성 문제를 조심해야 한다.

* 참고 *
동시성 문제는 지역 변수에서 발생하지 않는다.
지역 변수는 쓰레드마다 각각 다른 메모리 영역이 할당된다. (멤버 변수 또는 static 해당 )
값을 읽기는 해당하지 않고 변경의 경우만 '동시성 문 제' 발생

싱글톤 객체를 사용하면서 동시성 문제를 해결할 수 있는 것이 '스레드 로컬'이다.



* 핵심 기능과 부가 기능

비즈니스 로직은 주로 핵심 로직과 템플릿 로직으로 나뉜다.
템플릿 로직을 디자인 패턴을 통하여 중복 최소화 하는 것이 리팩터링의 첫 번째이다.

템플릿 로직 : 변하지 않는 로직
핵심 로직 : 변하는 핵심 로직

* 템플릿 : 기준이 되는 거대한 틀


* 템플릿 메서드 패턴
템플릿이라는 틀에 변하지 않는 부분을 몰아둔다. 일부 변하는 부분을 별도로 호출하여 해결한다.
템플릿 메서드 패턴을 통해 핵심 기능에 좀 더 집중할 수 있게 된다.
또한 공통 코드를 모듈화하기 때문에, 핵심 기능, 부가 기능으로 나뉘어 단일 책임 원칙(SRP)를 지킬 수 있다.

- 정의



* 좋은 설계란
좋은 설계란 변경이 일어날 때 자연스럽게 드러난다.
변경이 일어날 때 여러 개를 수정하지 않도록, 공통된 코드를 모듈화하여 사용하는 것이 좋은 설계다.



* 제네릭
제네릭에서 반환 타입이 없을 경우 Void를 사용하고 return null;을 사용한다.